# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def isPalindrome(self, head: Optional[ListNode]) -> bool:
        slow=head
        fast=head
        while fast and fast.next and fast.next.next:
            slow=slow.next
            fast=fast.next.next
        prev=slow
        curr=prev.next
        nex=None
        # print(slow)
        slow=slow.next
        prev.next=None
        while curr:
            nex=curr.next
            curr.next=prev
            prev=curr
            curr=nex
        
        ptr=head
        slow=prev
        # print(head,slow)
        while slow and ptr:
            if slow.val!=ptr.val:
                return False
            slow=slow.next
            ptr=ptr.next
        return True