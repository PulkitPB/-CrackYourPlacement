'''
left top i-1 j-1
top i-1
right top i-1 j+1
left j-1
right j+1
left bottom i+1 j-1
bottom i+1
right bottom i+1 j+1

'''
def solve(grid,i,j,n,m):
    
    count=0
    if i-1>=0 and j-1>=0:
        count+=grid[i-1][j-1]
    if i-1>=0:
        count+=grid[i-1][j]
    if i-1>=0 and j+1<m:
        count+=grid[i-1][j+1]
    if j-1>=0:
        count+=grid[i][j-1]
    if j+1<m:
        count+=grid[i][j+1]
    if i+1<n and j-1>=0:
        count+=grid[i+1][j-1]
    if i+1<n:
        count+=grid[i+1][j]
    if i+1<n and j+1<m:
        count+=grid[i+1][j+1]
    if grid[i][j]==1:
        if count<2 or count>3:
            return 0
        else:
            return 1
    if grid[i][j]==0:
        if count==3:
            return 1
        return 0
    
class Solution:
    def gameOfLife(self, board: List[List[int]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        d=[]
        n=len(board)
        m=len(board[0])
        for i in range(n):
            x=[]
            for j in range(m):
                x.append(solve(board,i,j,n,m))
            d.append(x)
        for i in range(n):
            for j in range(m):
                board[i][j]=d[i][j]
        
        