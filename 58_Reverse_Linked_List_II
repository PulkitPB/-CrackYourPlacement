# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
def reverse(head):
    curr=head
    prev=None
    nex=None
    while curr!=None:
        nex=curr.next
        curr.next=prev
        prev=curr
        curr=nex
    return prev
class Solution:
    def reverseBetween(self, head: Optional[ListNode], left: int, right: int) -> Optional[ListNode]:
        start=None
        end=None
        count=1
        ptr=head
        left-=1
        temp=None
        if left==0:
            temp=ptr
        while ptr:
            if count==left:
                start=ptr
                temp=ptr.next
            elif count==right:
                end=ptr.next
                ptr.next=None
                break
            count+=1
            ptr=ptr.next
        temp1=reverse(temp)
        # print(temp1)
        if start:
            start.next=temp1
        if not start:
            head=temp1
        ptr=temp1
        while ptr and ptr.next:
            ptr=ptr.next
        ptr.next=end
        return head