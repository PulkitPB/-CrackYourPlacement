class Solution:

    #Function to find minimum time required to rot all oranges. 
	def orangesRotting(self, grid):
		#Code here
        n=len(grid)
        m=len(grid[0])
        rottend=[]
        for i in range(n):
            l=[]
            for j in range(m):
                l.append(2**32-1)
            rottend.append(l)
        x=[]
        for i in range(n):
            for j in range(m):
                if grid[i][j]==2:
                    x.append([i,j])
                    rottend[i][j]=0
        time=1
        ans=0
        while x:
            new=[]
            for [i,j] in x:
                if i-1>=0 and grid[i-1][j]==1:
                    new.append([i-1,j])
                    rottend[i-1][j]=min(rottend[i-1][j],time)
                    # ans=max(ans,rottend[i-1][j])
                    grid[i-1][j]=2
                if j-1>=0 and grid[i][j-1]==1:
                    new.append([i,j-1])
                    rottend[i][j-1]=min(rottend[i][j-1],time)
                    # ans=max(ans,rottend[i][j-1])
                    grid[i][j-1]=2
                if i+1<n and grid[i+1][j]==1:
                    new.append([i+1,j])
                    rottend[i+1][j]=min(rottend[i+1][j],time)
                    # ans=max(ans,rottend[i+1][j])
                    grid[i+1][j]=2
                if j+1<m and grid[i][j+1]==1:
                    new.append([i,j+1])
                    rottend[i][j+1]=min(rottend[i][j+1],time)
                    # ans=max(ans,rottend[i][j+1])
                    grid[i][j+1]=2
            time+=1
            x=new
        for i in range(n):
            for j in range(m):
                if grid[i][j]==1:
                    return -1
                if grid[i][j]==2:
                    ans=max(ans,rottend[i][j])
        return ans